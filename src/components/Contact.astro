---
interface FormField {
  id: string;
  name: string;
  type: 'text' | 'email' | 'tel';
  label: string;
  autocomplete?: string;
  required?: boolean;
}

const formFields: FormField[] = [
  {
    id: 'first-name',
    name: 'first-name',
    type: 'text',
    label: 'First name*',
    autocomplete: 'given-name',
    required: true,
  },
  {
    id: 'surname',
    name: 'surname',
    type: 'text',
    label: 'Surname*',
    autocomplete: 'family-name',
    required: true,
  },
  {
    id: 'email',
    name: 'email',
    type: 'email',
    label: 'Email*',
    autocomplete: 'email',
    required: true,
  },
  {
    id: 'phone',
    name: 'phone',
    type: 'tel',
    label: 'Mobile number',
    autocomplete: 'tel',
    required: false,
  },
];

// Get environment variables
const recaptchaSiteKey = import.meta.env.PUBLIC_RECAPTCHA_SITE_KEY;
const staticFormsApiKey = import.meta.env.PUBLIC_STATICFORMS_API_KEY;
---

<!-- reCAPTCHA JS -->
<script src="https://www.google.com/recaptcha/api.js" async defer></script>

<section id="contact" class="py-20 bg-white">
  <div class="container">
    <h2 class="text-3xl font-bold text-center mb-4">Contact Us</h2>
    <p class="text-gray-600 text-center mb-12 max-w-2xl mx-auto">Get in touch with us for any questions about our services or enquiries:</p>
    <div class="max-w-2xl mx-auto">
      <div id="success-message" class="mb-6 p-4 rounded-md bg-green-50 border border-green-200 hidden" role="alert">
        <p class="text-green-800">Thank you for your enquiry! We'll get back to you soon.</p>
      </div>
      <div id="error-message" class="mb-6 p-4 rounded-md bg-red-50 border border-red-200 hidden" role="alert">
        <p class="text-red-800">Sorry, there was an error sending your enquiry. Please try again.</p>
      </div>
      <form id="contact-form" class="space-y-6" action="https://api.staticforms.xyz/submit" method="POST" aria-label="Contact form">
        <div class="grid grid-cols-1 gap-6 sm:grid-cols-2">
          <input type="hidden" name="apiKey" value={staticFormsApiKey} />
          <input type="hidden" name="redirect" value={Astro.url.href} />
          <input type="hidden" name="subject" value="New Enquiry Submission" />
          {
            formFields.map((field) => (
              <div>
                <label for={field.id} class="block text-sm font-medium text-gray-700">
                  {field.label}
                </label>
                <input
                  type={field.type}
                  name={field.name}
                  id={field.id}
                  autocomplete={field.autocomplete}
                  required={field.required}
                  aria-label={field.label}
                  aria-required={field.required}
                  class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
                />
              </div>
            ))
          }
        </div>

        <div>
          <label for="message" class="block text-sm font-medium text-gray-700">Message*</label>
          <textarea
            id="message"
            name="message"
            rows="4"
            required
            aria-label="Your message"
            aria-required="true"
            class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"></textarea>
        </div>

        <div class="grid gap-6 sm:grid-cols-2">
          <div class="g-recaptcha" data-sitekey={recaptchaSiteKey} data-callback="onRecaptchaLoad" aria-label="reCAPTCHA verification">
          </div>
        </div>

        <div>
          <button type="submit" class="btn btn-primary w-full" aria-label="Submit contact form">Send Enquiry</button>
        </div>
      </form>
    </div>
  </div>
</section>

<script>
  // Handle form submission
  const form = document.getElementById('contact-form') as HTMLFormElement;
  const submitButton = form?.querySelector('button[type="submit"]') as HTMLButtonElement | null;
  const successMessage = document.getElementById('success-message');
  const errorMessage = document.getElementById('error-message');

  // Function to handle reCAPTCHA load
  (window as any).onRecaptchaLoad = function () {
    console.log('reCAPTCHA loaded successfully');
  };

  const showMessage = (type: 'success' | 'error') => {
    if (type === 'success') {
      successMessage?.classList.remove('hidden');
      errorMessage?.classList.add('hidden');
      form?.classList.add('hidden');
    } else {
      successMessage?.classList.add('hidden');
      errorMessage?.classList.remove('hidden');
      form?.classList.remove('hidden');
    }
  };

  form?.addEventListener('submit', async (e) => {
    e.preventDefault();

    if (!submitButton) return;

    // Disable submit button and show loading state
    submitButton.disabled = true;
    submitButton.textContent = 'Sending...';

    try {
      const formData = new FormData(form);
      const response = await fetch(form.action, {
        method: 'POST',
        body: formData,
      });

      if (response.ok) {
        showMessage('success');
      } else {
        showMessage('error');
      }
    } catch (error) {
      showMessage('error');
    } finally {
      // Re-enable submit button
      submitButton.disabled = false;
      submitButton.textContent = 'Send Enquiry';
    }
  });
</script>
